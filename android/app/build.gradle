// Top-level Gradle plugins
apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"


// Load secure signing properties
def signingPropsFile = rootProject.file("../.env.signing")

if (signingPropsFile.exists()) {
    def signingProps = new Properties()
    signingProps.load(new FileInputStream(signingPropsFile))

    ext.UPLOAD_STORE_FILE      = signingProps['UPLOAD_STORE_FILE']
    ext.UPLOAD_STORE_PASSWORD = signingProps['UPLOAD_STORE_PASSWORD']
    ext.UPLOAD_KEY_ALIAS      = signingProps['UPLOAD_KEY_ALIAS']
    ext.UPLOAD_KEY_PASSWORD   = signingProps['UPLOAD_KEY_PASSWORD']
} else {
    throw new FileNotFoundException("üõë .env.signing file is missing.")
}

// Environment files per build type + flavor
project.ext.envConfigFiles = [
    productiondebug:     ".env.production",
    productionrelease:   ".env.production",
    developmentdebug:    ".env.development",
    developmentrelease:  ".env.development",
    stagingdebug:        ".env.staging",
    stagingrelease:      ".env.staging",
    sitdebug:            ".env.sit",
    sitrelease:          ".env.sit",
    uatdebug:            ".env.uat",
    uatrelease:          ".env.uat"
]

// Apply react-native-config dotenv support
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"

react {
    autolinkLibrariesWithApp()
}

// Configuration switches
def enableProguardInReleaseBuilds = false
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion       rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk       rootProject.ext.compileSdkVersion
    namespace        "com.validus.ignitekit"

    defaultConfig {
        applicationId       "com.validus.ignitekit"
        minSdkVersion       rootProject.ext.minSdkVersion
        targetSdkVersion    rootProject.ext.targetSdkVersion
        versionCode         17
        versionName         "1.2"
    }

    flavorDimensions "default"

    /**
     * üëã WHY THIS FLAVOR CONFIGURATION?
     *
     * Since all Android build flavors (dev, sit, uat, prod) are uploaded to the **same Play Store app**, 
     * they must share the **same applicationId** (`com.validus.ignitekit`).
     *
     * Adding an `applicationIdSuffix` like `.development` changes the package name and treats it as a different app on Play Console.
     *
     * ‚úÖ We omit suffixes to ensure all flavors build under the same app ID for Internal, Beta, Closed & Production testing.
     *
     * ‚ö†Ô∏è If you are building **multiple apps** from one codebase (client-specific, staging, etc.), 
     * you can uncomment the second `productFlavors` block to differentiate builds using `applicationIdSuffix`.
     */

    productFlavors {
        production {
            resValue "string", "build_config_package", "com.validus.ignitekit"
        }
        development {
            resValue "string", "build_config_package", "com.validus.ignitekit"
        }
        sit {
            resValue "string", "build_config_package", "com.validus.ignitekit"
        }
        uat {
            resValue "string", "build_config_package", "com.validus.ignitekit"
        }
    }

    /* Example block for separate apps from one repo */
    /*
    productFlavors {
        production {
            applicationIdSuffix ""
            resValue "string", "build_config_package", "com.validus.ignitekit"
        }
        staging {
            applicationIdSuffix ".staging"
            resValue "string", "build_config_package", "com.validus.ignitekit"
        }
        development {
            applicationIdSuffix ".development"
            resValue "string", "build_config_package", "com.validus.ignitekit"
        }
        sit {
            applicationIdSuffix ".sit"
            resValue "string", "build_config_package", "com.validus.ignitekit"
        }
        uat {
            applicationIdSuffix ".uat"
            resValue "string", "build_config_package", "com.validus.ignitekit"
        }
    }
    */

    signingConfigs {
        debug {
            storeFile     file('debug.keystore')
            storePassword 'android'
            keyAlias      'androiddebugkey'
            keyPassword   'android'
        }
        release {
            storeFile     rootProject.file(UPLOAD_STORE_FILE)
            storePassword UPLOAD_STORE_PASSWORD
            keyAlias      UPLOAD_KEY_ALIAS
            keyPassword   UPLOAD_KEY_PASSWORD
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig     signingConfigs.release
            minifyEnabled     enableProguardInReleaseBuilds
            proguardFiles     getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            matchingFallbacks = ["debug", "release"]
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}


